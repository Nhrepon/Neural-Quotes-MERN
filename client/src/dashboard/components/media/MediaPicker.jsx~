import React, {useEffect, useState} from 'react';
import {backendUrl} from "../../../../config.js";
import MediaStore from "../../store/MediaStore.js";
import toast from "react-hot-toast";
import './mediaPicker.css';

const MediaPicker = ({onInputChange}) => {
    const [pageNo, setPageNo]=useState(1);
    const [perPage, setPerPage]=useState(10);

    const {fileList, getFileList, totalFile} = MediaStore();
    const [isModalVisible, setIsModalVisible] = useState(false);

    useEffect(() => {
        (async ()=>{
            if (fileList == null || fileList.length === 0 ){
                await getFileList(pageNo,perPage);
            }
        })()
    }, []);

    // const onSubmit=async (filePath)=>{
    //     await onInputChange(filePath);
    //     toast.success(filePath);
    //     closeButton();
    // }
    // const btntog = ()=>{
    //     document.getElementById("custom-modal").classList.toggle("d-none");
    // }
    // const closeButton = ()=>{
    //     document.getElementById("custom-modal").classList.add("d-none");
    // }

    const handleFileSelect = async (filePath) => {
        await onInputChange(filePath); // Pass the file path to the parent
        toast.success("Image selected successfully.");
        setIsModalVisible(false); // Close modal
    };

    const openModal = () => setIsModalVisible(true);
    const closeModal = () => setIsModalVisible(false);


    const nextPage = async ()=>{
        await getFileList(pageNo+1, perPage);
        setPageNo(pageNo+1);
    }
    const prevPage = async ()=>{
        await getFileList(pageNo-1, perPage);
        setPageNo(pageNo-1);
    }



    return (
        <div>

                    <button className="btn btn-success my-2 " onClick={openModal}>Select image</button>
            {
                isModalVisible && (


                    <div className="custom-modal">
                        <div className="bg-light mx-auto custom-modal-content">
                            <div className="d-flex justify-content-between">
                                <h5 className="modal-title">Select image</h5>
                                <div className="d-flex flex-row gap-3 align-items-center">
                                    <div className="d-flex flex-row gap-3 align-items-center bg-success rounded-1">
                                        <button onClick={prevPage} disabled={pageNo === 1}
                                                className="btn btn-success rounded-0">Prev
                                        </button>
                                        <span className="text-light fs-5">{pageNo}</span>
                                        <button onClick={nextPage} disabled={pageNo === Math.ceil(totalFile / perPage)}
                                                className="btn btn-success rounded-0">Next
                                        </button>
                                    </div>
                                    <button type="button" className="p-2 bg-danger text-light btn btn-close" onClick={closeModal}></button>
                                </div>

                            </div>
                            <div className="custom-modal-body">
                                <div className="grid-container my-2">
                                    {
                                        fileList?.map((item, i) => {
                                            return (
                                                <div key={i} className="cards card rounded shadow-sm">
                                                    <img onClick={async () => {
                                                        await handleFileSelect(item.filePath)
                                                    }} className="w-100 rounded-top-2"
                                                         title={item.name}
                                                         src={`${backendUrl + item.filePath}`} alt={item.name}
                                                         crossOrigin={"anonymous"}
                                                         onError={(e) => e.target.style.display = 'none'}/>
                                                </div>
                                            );
                                        })
                                    }
                                </div>

                            </div>
                        </div>
                    </div>
                )
            }
        </div>
    );
};

export default MediaPicker;